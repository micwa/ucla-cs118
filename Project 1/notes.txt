[Notes]

HTTP messages
=============

Request format
    - first line:
        - GET <url> HTTP/<version>
    - required headers:
        - Host
    - support for:
        - Connection
    - last line is empty, i.e., ends with "\r\n\r\n"
Response format:
    - first line (status):
        - HTTP/<version> <status code> <status description>
    - required headers:
        - Content-Length (if OK)
    - support for:
        - Connection
    - empty line separates header and payload

Client
======

Steps:
    - parse URL(s) into a map(HOST => [FILES])
    - while there are still files to retrieve (i.e., for each HOST):
        - getaddrinfo() for IP
        - socket() to create socket
        - connect() to connect to server
        [non-persistent]
        - retrieve file:
            - create HTTP request
            - send() the request
            - recv(), with timeout, the response
        [persistent]
        - attempt to retrieve multiple files (from same HOST):
            - retrieve first file (as above)
            [non-pipelined]
            - if supports HTTP/1.1, retrieve more files;
              else, do nothing (continue)
            [pipelined]
            - if supports HTTP/1.1, send requests for all files;
              discount all files that failed to send()
            - recv(), with timeout, all responses
        - close() the connection

Server
======

Steps:
    - etc.

Pitfalls
========

- sending/receiving data:
    - send() does not always send all data
        - have a send_all() that retries if portion of data is unsent
    - recv() receives raw data which needs to be decoded
        - recvHttpRequest() used by server
        - recvHttpResponse() used by client
- client error handling:
    - exit when error (return status == -1) on:
        - getaddrinfo()
        - socket()
        - connect()
        - send()
        - recv()
        - close()
    - also exit when:
        - recv() == 0 (EOF) immediately after send()
        - recv() timeouts