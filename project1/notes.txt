[Notes]

HTTP messages
=============

Request format
    - first line:
        - GET <path> HTTP/<version>
    - required headers:
        - Host
    - support for:
        - Connection
    - last line is empty, i.e., ends with "\r\n\r\n"
Response format:
    - first line (status):
        - HTTP/<version> <status code> <status description>
    - required headers:
        - Content-Length (if OK and sending payload)
    - support for:
        - Connection
    - empty line separates header and payload

Implementation (classes)
========================

FileReqest
    - getResponse()
    - sendRequest(sockfd)
        - sendAll() the request
    - recvResponse(sockfd)
        - readline() for first line
        - readlinesUntilEmpty() for the rest
        - makeHttpResponse() to make HttpResponse
        - recvAll() for payload
FileResponse
    - recvRequest(sockfd)
        - readline() for first line
        - readlinesUntilEmpty() for the rest
        - makeHttpRequest() to make HttpRequest
    - sendResponse(sockfd)
        - ifstream to read file
        - sendAll() to send HttpResponse
WebUtil (function relationships)
    - readlinesUntilEmpty()
        - readline()
            - recvWithTimeout()
                - recv()
    - recvAll()
        - recvWithTimeout()
            - recv()
    - sendAll()
        - send()

Client
======

Steps:
    - parse URL(s) into a map(HOST => [FILES])
    - while there are still files to retrieve (i.e., for each HOST):
        - getaddrinfo() for IP
        - socket() to create socket
        - connect() to connect to server
        [non-persistent]
        - retrieve file:
            - create HTTP request
            - send() the request
            - recv(), with timeout, the response
            - if not 404, save the file
        [persistent]
        - attempt to retrieve multiple files (from same HOST):
            - retrieve first file (as above)
            [non-pipelined]
            - if supports HTTP/1.1, retrieve more files;
              else, do nothing (continue)
            [pipelined]
            - if supports HTTP/1.1, send requests for all files;
              discount all files that failed to send()
            - recv() and save, with timeout, all responses
        - close() the connection

Server
======

Steps:
    - store PATH (directory) as variable
    - getaddrinfo() for IP
    - socket() to create socket listen_socket
    - bind() to bind to IP:PORT
    - listen() for connection on listen_socket
    - while true:
        [multi-threaded]
        - tmp_sock = accept() the connection
        - spawn thread new_thread to handleConnection(tmp_sock)
        - new_thread.detach()               // So no need to join()
        [single-threaded, using select()]
        - maintain map<int, time_t> openConns of open connections,
          mapping socket -> (time last active)
        - select(), with timeout, until socket sock_ready is available
        - if sock_ready == listening socket:
            - tmp_sock = accept() the connection
            - openConns[tmp_sock] = getCurrentTime()
        - else if sock_ready == socket in openConns:
            [persistent, pipelined]
            - recv() the request
            - create HttpResponse
            - send() the response
            - update openConns[tmp_sock] to getCurrentTime()
            [non-persistent - it's more complicated than persistent, so not going to bother]
        - close() all connections in openConns that are "timed out"
    where
    handleConnection(int sockfd)
        [non-persistent]
        - recv(), with timeout, the request
        - create HttpResponse
        - send() the response
        - close() the connection
        [persistent, pipelined]
        - while true:
            - recv(), with timeout, the request;
              if timeout or EOF, close() the connection and break
            - create HttpResponse
            - send() the response

Pitfalls
========

- sending/receiving data:
    - send() does not always send all data (same for recv() for receiving)
        - have a send_all() that retries if portion of data is unsent
    - recv() receives raw data which needs to be decoded
        - recvHttpRequest() used by server
        - recvHttpResponse() used by client
- client error handling:
    - exit when error (return status == -1) on:
        - getaddrinfo()
        - socket()
        - connect()
        - send()
        - recv()
        - close()
    - also exit when:
        - recv() == 0 (EOF) immediately after send()
        - recv() timeouts
- server error handling:
    - exit on:
        - getaddrinfo()
        - socket()
        - bind()
        - listen()
- function return values on error:
    - getaddrinfo():
        - returns nonzero, check gai_strerror(int)
    - socket(), connect(), bind(), listen(), accept(), close():
        - returns -1, check errno
    - send():
        - returns -1, check errno; else returns number of bytes sent
    - recv():
        - returns -1, check errno
        - if remote closed connection, returns 0; else returns bytes received

Other
=====

- other (possibly) useful functions:
    - setsockopt()
    - getsockname()
